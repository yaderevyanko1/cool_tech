// ===== –î–ê–ù–Ü –¢–û–í–ê–†–Ü–í =====
const products = [
    {
        id: 1,
        name: "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ Samsung RF85K901",
        price: 45000,
        category: "fridges",
        image: "images/fridges/fridge2.webp",
        description: "–î–≤–æ–∫–∞–º–µ—Ä–Ω–∏–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –∑ No Frost —Ç–∞ –µ–Ω–µ—Ä–≥–æ–∫–ª–∞—Å–æ–º A++"
    },
    {
        id: 2,
        name: "–ú—É–ª—å—Ç–∏–≤–∞—Ä–∫–∞ Redmond RMC-M90",
        price: 3200,
        category: "cooking",
        image: "images/cooking/multicooker1.jpg",
        description: "–†–æ–∑—É–º–Ω–∞ –º—É–ª—å—Ç–∏–≤–∞—Ä–∫–∞ –∑ 12 –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è"
    },
    {
        id: 3,
        name: "–î—É—Ö–æ–≤–∞ —à–∞—Ñ–∞ Bosch HBG655BS1",
        price: 25000,
        category: "baking",
        image: "images/baking/oven1.jpg",
        description: "–ï–ª–µ–∫—Ç—Ä–∏—á–Ω–∞ –¥—É—Ö–æ–≤–∞ —à–∞—Ñ–∞ –∑ –∫–æ–Ω–≤–µ–∫—Ü—ñ—î—é —Ç–∞ –≥—Ä–∏–ª–µ–º"
    },
    {
        id: 4,
        name: "–ë–ª–µ–Ω–¥–µ—Ä Vitamix A3500",
        price: 18500,
        category: "small",
        image: "images/small/blender1.jpg",
        description: "–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –±–ª–µ–Ω–¥–µ—Ä –∑ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–º —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è–º"
    },
    {
        id: 5,
        name: "–ö–∞–≤–æ–º–∞—à–∏–Ω–∞ DeLonghi ECAM350.35",
        price: 32000,
        category: "small",
        image: "images/small/coffee_machine1.jpg",
        description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∫–∞–≤–æ–º–∞—à–∏–Ω–∞ –∑ –∫–∞–ø—É—á–∏–Ω–∞—Ç–æ—Ä–æ–º"
    },
    {
        id: 6,
        name: "–°–∫–æ–≤–æ—Ä–æ–¥–∞ Tefal Expertise",
        price: 2100,
        category: "cooking",
        image: "images/cooking/pan1.jpg",
        description: "–ê–ª—é–º—ñ–Ω—ñ—î–≤–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–∞ –∑ —Ç–∏—Ç–∞–Ω–æ–≤–∏–º –ø–æ–∫—Ä–∏—Ç—Ç—è–º"
    },
    {
        id: 7,
        name: "–•–ª—ñ–±–æ–ø—ñ—á–∫–∞ Panasonic SD-ZP2000",
        price: 8900,
        category: "baking",
        image: "images/baking/bread_maker1.jpg",
        description: "–•–ª—ñ–±–æ–ø—ñ—á–∫–∞ –∑ 33 –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏ —Ç–∞ –¥–∏—Å–ø–µ–Ω—Å–µ—Ä–æ–º"
    },
    {
        id: 8,
        name: "–ú—ñ–∫—Ä–æ—Ö–≤–∏–ª—å–æ–≤–∫–∞ Samsung MS23K3513",
        price: 4500,
        category: "small",
        image: "images/small/microwave1.jpg",
        description: "–ú—ñ–∫—Ä–æ—Ö–≤–∏–ª—å–æ–≤–∫–∞ –∑ –≥—Ä–∏–ª–µ–º –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—é 800 –í—Ç"
    },
    {
        id: 9,
        name: "–í–∞—Ä–∏–ª—å–Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω—è Electrolux EHH6240",
        price: 15000,
        category: "cooking",
        image: "images/cooking/cooktop1.jpg",
        description: "–Ü–Ω–¥—É–∫—Ü—ñ–π–Ω–∞ –≤–∞—Ä—ñ–ª—å–Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω—è –∑ 4 –∫–æ–Ω—Ñ–æ—Ä–∫–∞–º–∏"
    },
    {
        id: 10,
        name: "–ü–æ—Å—É–¥–æ–º–∏–π–Ω–∞ –º–∞—à–∏–Ω–∞ Bosch SMS25AI00E",
        price: 18000,
        category: "fridges",
        image: "images/fridges/dishwasher1.jpg",
        description: "–ü–æ—Å—É–¥–æ–º–∏–π–Ω–∞ –º–∞—à–∏–Ω–∞ –Ω–∞ 12 –∫–æ–º–ø–ª–µ–∫—Ç—ñ–≤ –ø–æ—Å—É–¥—É"
    }
];

// ===== –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü =====
let cart = [];
let currentCategory = 'all';
let searchTerm = '';

// ===== DOM –ï–õ–ï–ú–ï–ù–¢–ò =====
const elements = {
    productsGrid: document.getElementById('productsGrid'),
    cartBtn: document.getElementById('cartBtn'),
    cartCounter: document.getElementById('cartCounter'),
    cartModal: document.getElementById('cartModal'),
    closeCartBtn: document.getElementById('closeCartBtn'),
    cartItems: document.getElementById('cartItems'),
    totalPrice: document.getElementById('totalPrice'),
    clearCartBtn: document.getElementById('clearCartBtn'),
    checkoutBtn: document.getElementById('checkoutBtn'),
    searchInput: document.getElementById('searchInput'),
    noProducts: document.getElementById('noProducts'),
    filterBtns: document.querySelectorAll('.filter-btn'),
    mobileMenuBtn: document.getElementById('mobileMenuBtn'),
    navMenu: document.querySelector('.nav-menu'),
    scrollTopBtn: document.getElementById('scrollTopBtn'),
    loader: document.getElementById('loader'),
    notification: document.getElementById('notification')
};

// ===== –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á =====

/**
 * –°—Ç–≤–æ—Ä—é—î –µ–ª–µ–º–µ–Ω—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @param {Object} product - –û–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É
 * @param {boolean} isCart - –ß–∏ –¥–ª—è –∫–æ—à–∏–∫–∞
 * @returns {string} HTML —Ä—è–¥–æ–∫
 */
function createImageElement(product, isCart = false) {
    const imageSize = isCart ? '60px' : '100%';
    const imageHeight = isCart ? '60px' : '200px';
    
    if (product.image && (product.image.includes('.jpg') || product.image.includes('.jpeg') || product.image.includes('.png') || product.image.includes('.webp'))) {
        return `
            <img 
                src="${product.image}" 
                alt="${product.name}" 
                style="width: ${imageSize}; height: ${imageHeight}; object-fit: cover; border-radius: ${isCart ? '6px' : '8px'};"
                onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
            >
            <div style="display: none; width: ${imageSize}; height: ${imageHeight}; align-items: center; justify-content: center; background-color: #f5f5f5; border-radius: ${isCart ? '6px' : '8px'}; font-size: ${isCart ? '24px' : '48px'}; color: #ccc;">
                üì¶
            </div>
        `;
    } else {
        // –ü–æ–∫–∞–∑—É—î–º–æ placeholder
        return `
            <div style="display: flex; width: ${imageSize}; height: ${imageHeight}; align-items: center; justify-content: center; background-color: #f5f5f5; border-radius: ${isCart ? '6px' : '8px'}; font-size: ${isCart ? '24px' : '48px'}; color: #ccc;">
                üì¶
            </div>
        `;
    }
}

/**
 * –ü–æ–∫–∞–∑—É—î –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á
 */
function showLoader() {
    if (elements.loader) {
        elements.loader.style.display = 'flex';
    }
}

/**
 * –ü—Ä–∏—Ö–æ–≤—É—î –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á
 */
function hideLoader() {
    if (elements.loader) {
        setTimeout(() => {
            elements.loader.style.display = 'none';
        }, 500);
    }
}

/**
 * –ü–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
 * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 * @param {string} type - –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ('success' –∞–±–æ 'error')
 */
function showNotification(message, type = 'success') {
    if (!elements.notification) return;
    
    elements.notification.textContent = message;
    elements.notification.className = `notification ${type}`;
    elements.notification.classList.add('show');
    
    setTimeout(() => {
        elements.notification.classList.remove('show');
    }, 3000);
}

/**
 * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ç–æ–≤–∞—Ä–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
 * @param {Array} productsToShow - –ú–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 */
function displayProducts(productsToShow = products) {
    if (!elements.productsGrid) return;
    
    elements.productsGrid.innerHTML = '';

    if (productsToShow.length === 0) {
        if (elements.noProducts) {
            elements.noProducts.style.display = 'block';
        }
        return;
    }

    if (elements.noProducts) {
        elements.noProducts.style.display = 'none';
    }

    productsToShow.forEach(product => {
        const productCard = document.createElement('div');
        productCard.className = 'product-card';

        productCard.innerHTML = `
            <div class="product-image">
                ${createImageElement(product, false)}
            </div>
            <h3 class="product-title">${product.name}</h3>
            <p class="product-description">${product.description}</p>
            <div class="product-price">${product.price.toLocaleString()} ‚Ç¥</div>
            <div class="product-actions">
                <button class="add-to-cart-btn" onclick="addToCart(${product.id})">
                    üõí –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫
                </button>
            </div>
        `;

        elements.productsGrid.appendChild(productCard);
    });
}

/**
 * –§—ñ–ª—å—Ç—Ä—É—î —Ç–æ–≤–∞—Ä–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é —Ç–∞ –ø–æ—à—É–∫–æ–≤–∏–º –∑–∞–ø–∏—Ç–æ–º
 */
function filterProducts() {
    let filteredProducts = products;

    // –§—ñ–ª—å—Ç—Ä –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
    if (currentCategory !== 'all') {
        filteredProducts = filteredProducts.filter(product => 
            product.category === currentCategory
        );
    }

    // –§—ñ–ª—å—Ç—Ä –∑–∞ –ø–æ—à—É–∫–æ–≤–∏–º –∑–∞–ø–∏—Ç–æ–º
    if (searchTerm) {
        filteredProducts = filteredProducts.filter(product =>
            product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            product.description.toLowerCase().includes(searchTerm.toLowerCase())
        );
    }

    displayProducts(filteredProducts);
}

/**
 * –î–æ–¥–∞—î —Ç–æ–≤–∞—Ä –¥–æ –∫–æ—à–∏–∫–∞
 * @param {number} productId - ID —Ç–æ–≤–∞—Ä—É
 */
function addToCart(productId) {
    const product = products.find(p => p.id === productId);
    if (!product) return;

    const existingItem = cart.find(item => item.id === productId);
    
    if (existingItem) {
        existingItem.quantity += 1;
        showNotification(`–ó–±—ñ–ª—å—à–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å "${product.name}" –≤ –∫–æ—à–∏–∫—É`);
    } else {
        cart.push({ ...product, quantity: 1 });
        showNotification(`"${product.name}" –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞`);
    }

    updateCartUI();
}

/**
 * –í–∏–¥–∞–ª—è—î —Ç–æ–≤–∞—Ä –∑ –∫–æ—à–∏–∫–∞
 * @param {number} productId - ID —Ç–æ–≤–∞—Ä—É
 */
function removeFromCart(productId) {
    const product = products.find(p => p.id === productId);
    cart = cart.filter(item => item.id !== productId);
    
    if (product) {
        showNotification(`"${product.name}" –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞`);
    }
    
    updateCartUI();
    displayCartItems();
}

/**
 * –ó–º—ñ–Ω—é—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫—É
 * @param {number} productId - ID —Ç–æ–≤–∞—Ä—É
 * @param {number} change - –ó–º—ñ–Ω–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (+1 –∞–±–æ -1)
 */
function changeQuantity(productId, change) {
    const item = cart.find(item => item.id === productId);
    if (!item) return;

    item.quantity += change;

    if (item.quantity <= 0) {
        removeFromCart(productId);
    } else {
        updateCartUI();
        displayCartItems();
    }
}

/**
 * –û–Ω–æ–≤–ª—é—î UI –∫–æ—à–∏–∫–∞ (–ª—ñ—á–∏–ª—å–Ω–∏–∫)
 */
function updateCartUI() {
    if (!elements.cartCounter) return;
    
    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    elements.cartCounter.textContent = totalItems;
}

/**
 * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ç–æ–≤–∞—Ä–∏ –≤ –∫–æ—à–∏–∫—É
 */
function displayCartItems() {
    if (!elements.cartItems || !elements.totalPrice) return;

    elements.cartItems.innerHTML = '';

    if (cart.length === 0) {
        elements.cartItems.innerHTML = '<p style="text-align: center; color: #666; padding: 32px;">–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π</p>';
        elements.totalPrice.textContent = '0 ‚Ç¥';
        return;
    }

    cart.forEach(item => {
        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';

        cartItem.innerHTML = `
            <div class="cart-item-image">
                ${createImageElement(item, true)}
            </div>
            <div class="cart-item-details">
                <h4>${item.name}</h4>
                <p>${item.price.toLocaleString()} ‚Ç¥ –∑–∞ —à—Ç.</p>
            </div>
            <div class="cart-item-controls">
                <button onclick="changeQuantity(${item.id}, -1)">-</button>
                <span>${item.quantity}</span>
                <button onclick="changeQuantity(${item.id}, 1)">+</button>
            </div>
            <div class="cart-item-price">
                ${(item.price * item.quantity).toLocaleString()} ‚Ç¥
            </div>
            <button class="remove-item" onclick="removeFromCart(${item.id})" title="–í–∏–¥–∞–ª–∏—Ç–∏">
                ‚úï
            </button>
        `;

        elements.cartItems.appendChild(cartItem);
    });

    // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É
    const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    elements.totalPrice.textContent = `${total.toLocaleString()} ‚Ç¥`;
}

/**
 * –û—á–∏—â—É—î –∫–æ—à–∏–∫
 */
function clearCart() {
    if (cart.length === 0) return;
    
    if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫?')) {
        cart = [];
        updateCartUI();
        displayCartItems();
        showNotification('–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ');
    }
}

/**
 * –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
 */
function checkout() {
    if (cart.length === 0) {
        showNotification('–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π', 'error');
        return;
    }

    const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    const itemsCount = cart.reduce((sum, item) => sum + item.quantity, 0);
    
    showLoader();
    
    // –Ü–º—ñ—Ç–∞—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    setTimeout(() => {
        hideLoader();
        cart = [];
        updateCartUI();
        displayCartItems();
        closeModal();
        showNotification(`–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ ${total.toLocaleString()} ‚Ç¥ (${itemsCount} —Ç–æ–≤–∞—Ä—ñ–≤) —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!`);
    }, 2000);
}

/**
 * –í—ñ–¥–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
 * @param {string} modalId - ID –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
 */
function openModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
        
        if (modalId === 'cartModal') {
            displayCartItems();
        }
    }
}

/**
 * –ó–∞–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
 */
function closeModal() {
    if (elements.cartModal) {
        elements.cartModal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }
}

/**
 * –ü—Ä–æ–∫—Ä—É—á—É—î –¥–æ —Å–µ–∫—Ü—ñ—ó
 * @param {string} sectionId - ID —Å–µ–∫—Ü—ñ—ó
 */
function scrollToSection(sectionId) {
    const section = document.getElementById(sectionId);
    if (section) {
        section.scrollIntoView({ behavior: 'smooth' });
    }
}

/**
 * –ü–µ—Ä–µ–º–∏–∫–∞—î –≤–∏–¥–∏–º—ñ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "–ù–∞–≥–æ—Ä—É"
 */
function toggleScrollTopBtn() {
    if (!elements.scrollTopBtn) return;
    
    if (window.pageYOffset > 300) {
        elements.scrollTopBtn.style.display = 'block';
    } else {
        elements.scrollTopBtn.style.display = 'none';
    }
}

/**
 * –ü—Ä–æ–∫—Ä—É—á—É—î –¥–æ –≤–µ—Ä—Ö—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
 */
function scrollToTop() {
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

/**
 * –ü–µ—Ä–µ–º–∏–∫–∞—î –º–æ–±—ñ–ª—å–Ω–µ –º–µ–Ω—é
 */
function toggleMobileMenu() {
    if (!elements.mobileMenuBtn || !elements.navMenu) return;
    
    elements.mobileMenuBtn.classList.toggle('active');
    elements.navMenu.classList.toggle('active');
}

// ===== EVENT LISTENERS =====
document.addEventListener('DOMContentLoaded', function() {
    // –•–æ–≤–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    hideLoader();
    
    // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏
    displayProducts();
    
    // –ö–æ—à–∏–∫
    if (elements.cartBtn) {
        elements.cartBtn.addEventListener('click', () => openModal('cartModal'));
    }
    
    if (elements.closeCartBtn) {
        elements.closeCartBtn.addEventListener('click', closeModal);
    }
    
    if (elements.clearCartBtn) {
        elements.clearCartBtn.addEventListener('click', clearCart);
    }
    
    if (elements.checkoutBtn) {
        elements.checkoutBtn.addEventListener('click', checkout);
    }
    
    // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º
    if (elements.cartModal) {
        elements.cartModal.addEventListener('click', function(e) {
            if (e.target === elements.cartModal) {
                closeModal();
            }
        });
    }
    
    // –§—ñ–ª—å—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    elements.filterBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            // –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫
            elements.filterBtns.forEach(b => b.classList.remove('active'));
            // –î–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
            this.classList.add('active');
            
            currentCategory = this.dataset.category;
            filterProducts();
        });
    });
    
    // –ü–æ—à—É–∫
    if (elements.searchInput) {
        elements.searchInput.addEventListener('input', function() {
            searchTerm = this.value;
            filterProducts();
        });
    }
    
    // –ú–æ–±—ñ–ª—å–Ω–µ –º–µ–Ω—é
    if (elements.mobileMenuBtn) {
        elements.mobileMenuBtn.addEventListener('click', toggleMobileMenu);
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–≥–æ—Ä—É"
    if (elements.scrollTopBtn) {
        elements.scrollTopBtn.addEventListener('click', scrollToTop);
    }
    
    // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    window.addEventListener('scroll', toggleScrollTopBtn);
    
    // ESC –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeModal();
        }
    });
    
    // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    const navLinks = document.querySelectorAll('.nav-link');
    navLinks.forEach(link => {
        link.addEventListener('click', () => {
            if (elements.navMenu && elements.navMenu.classList.contains('active')) {
                toggleMobileMenu();
            }
        });
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∑ HTML
window.addToCart = addToCart;
window.removeFromCart = removeFromCart;
window.changeQuantity = changeQuantity;
window.clearCart = clearCart;
window.checkout = checkout;
window.scrollToSection = scrollToSection;
window.toggleMobileMenu = toggleMobileMenu;

console.log('üéâ CoolTech –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!');